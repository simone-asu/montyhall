% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/monty-hall-problem.R
\name{create_game}
\alias{create_game}
\title{Sum of vector elements.}
\usage{
create_game()
}
\arguments{
\item{x}{Numeric, complex, or logical vectors.}

\item{na.rm}{A logical scalar. Should missing values (including \code{NaN})
be removed?}

\item{...}{no arguments are used by the function.}
}
\value{
If all inputs are integer and logical, then the output
will be an integer. Otherwise it will be a length-one numeric or
complex vector.

Zero-length vectors have sum 0 by definition. See
\url{http://en.wikipedia.org/wiki/Empty_sum} for more details.

The function returns a length 3 character vector
indicating the positions of goats and the car.
}
\description{
\code{sum(x)} returns the sum of all the values present in its arguments.

\code{create_game()} generates a new game that consists of two doors
with goats behind them, and one with a car.
}
\details{
This is a generic function: methods can be defined for it directly
or via the \link{Summary} group generic. For this to work properly,
the arguments \code{...} should be unnamed, and dispatch is on the
first argument.

The game setup replicates the game on the TV show "Let's
Make a Deal" where there are three doors for a contestant
to choose from, one of which has a car behind it and two
have goats. The contestant selects a door, then the host
opens a door to reveal a goat, and then the contestant is
given an opportunity to stay with their original selection
or switch to the other unopened door. There was a famous
debate about whether it was optimal to stay or switch when
given the option to switch, so this simulation was created
to test both strategies.
}
\examples{
sum(1:10)
sum(1:5, 6:10)
sum(F, F, F, T, T)

sum(.Machine$integer.max, 1L)
sum(.Machine$integer.max, 1)

\dontrun{
sum("a")
}
  create_game()

}
